#! /bin/bash

### author	= "HYUNSOO PARK"
### email	= "hyunsoo_park2@tmax.co.kr"
### version	= "distribution.1.4"
### date	= "2017-12-05"

########################################################
#						       #
#		INITIAL SET UP - HOW TO		       #
#						       #
# 1. Download this script			       #
#						       #
# 2. Put this script inside of $HOME/bin/	       #
#						       #
# 3. Change the following variables' values below      #
#						       #
# 4. vi $HOME/.bashrc -> then add ". thisscriptname"   #
#    at the end of the file -> wq!		       #
#						       #
# 5. Launch a new terminal, then all set!	       #
#						       #
########################################################

########################################################
#						       #
# PATH TO THE DIRECTORY CONTAINING ALL TIBERO VERSIONS #
#						       #
#		  EDIT THE FOLLOWING	 	       #
#						       #
########################################################
MAIN_DIR="$HOME/tibero"
FIVE_PATCH_DIR="$MAIN_DIR/patches/5/patch"
SIX_PATCH_DIR="$MAIN_DIR/patches/6/patch"

########################################################
#						       #
#		    AVAILABLE COMMANDS		       #
#						       #
# [IN THE DIRECTORY WITH 'tbenv']		       #
# 1. 	$ hevn					       #
#    	run tbenv with SID of 'tibero'		       #
# 1.a   $ hevn somename				       #
#    	run tbenv with SID of 'somename'	       #
#						       #
# 2.    $ build					       #
#	build the branch for ya!		       #
#						       #
# 3.	$ hpatch tiberoversion patchfilename	       #
#	ex) $ hpatch 6 FS05_CS_131451a		       #
#	if you set up the above variables correctly,   #
#	the command = patch -p0 < 6/patch/FS05_CS...   #
#						       #
# [IN ONE OF THE TIBERO BRANCH DIRECTORIES]	       #
# 4.	$ up					       #
#	= svn up .				       #
# 						       #
# 5.	$ revert				       #
#	= svn revert -R .			       #
#						       #
# [IN THE DIRECTORY WITH ALL OF THE TIBERO BRANCHES    #
# 6.	$ buildall				       #
#	build every branch in the directory for you    #
#						       #
########################################################

#################################################################               
#                                                               #               
#         	  FUNCITONAL PART OF THE SCRIPT      	   	#               
#                                                               #               
################################################################# 

function get_consent()                                                          
{                                                                               
        echo $'\n'"(TYPE 'Y' OR 'y' TO PROCEED)"                                
        read RESPONSE                                                           
        if [ "$RESPONSE" == "Y" ] || [ "$RESPONSE" == "y" ]; then               
                Y=0                                                             
        else                                                                    
                echo $'\n'$'\n'"!!---PROGRESS LOG---!! [CANCELLED]"          
                Y=1                                                             
        fi                                                                      
}     

function hpatch()
{
	if [ -z "$2" ]
	then
		echo $'\n'$'\n'"!!---ERROR---!! [NO SUCH PATCH FILE GIVEN]"
		return 1
	fi

	PATH_TO_PATCH_FILE=""
	if [ "$1" == "5" ]
	then
		PATH_TO_PATCH_FILE=$FIVE_PATCH_DIR/$2
	elif [ "$1" == "6" ]
	then
		PATH_TO_PATCH_FILE=$SIX_PATCH_DIR/$2
	else
		echo $'\n'$'\n'"!!---ERROR---!! [NO SUCH PATCH DIRECTORY]"
		return 1
	fi
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Patching: $PATH_TO_PATCH_FILE]"
	
	patch -p 0 < $PATH_TO_PATCH_FILE
}

function buildall()
{
	#counter for build success and failure
	SUCCESS_COUNT=0                                                         
	FAIL_COUNT=0    

	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [SEARCHING FOR BRANCHES TO BUILD (this could take several minutes)]"
	#find all locations of tbevn script in the parent directory
	PATHS=$(find -L $MAIN_DIR -name tbenv)
       
	#split paths into an array 
	PATHS_ARRAY=($PATHS)
	
	#get the length of the array then decrement it by 1 for loop control
        LENGTH=${#PATHS_ARRAY[*]}                                                     
        ((LENGTH--))                                                            

	#index of the array keeping indices of branches to skip
	SKIP_COUNTER=0

	#check detected branches
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Following branches detected]"
	for ((i=0;i<=LENGTH;i++));                                              
        do		
		#########################################################
                #       Skip Tibero 7 from the branches to build        #
		#########################################################
		if [[ "${PATHS_ARRAY[$i]}" = *"/7/"* ]]
		then	
			SKIP[SKIP_COUNTER]=$i
			((SKIP_COUNTER++))
			echo "$i": Tibero 7 detected, skipping the branch...
			continue
		fi
		#remove "tbenv" at the end of the path
                echo "$i": ${PATHS_ARRAY[$i]%"tbenv"}
	done
	
	#TODO: ASK USER TO SKIP CERTAIN BRANCH
	#echo $'\n'"(TYPE 'Y' OR 'y' TO PROCEED)"                                
        #read RESPONSE                                                           
        #if [ "$RESPONSE" == "Y" ] || [ "$RESPONSE" == "y" ]; then               
        #        Y=0                                                             
        #else                                                                    
        #        echo $'\n'$'\n'"!!---WARNING---!! [PROCEDURE ABORTED]"          
        #        Y=1                                                             
        #fi

	get_consent
	if [ $Y == 1 ]                                                          
        then		
		return 1
	else
		#resetting the flag
		Y=1
	fi                                                                    

	######################################################################
	#[2017-12-06] svn up conflict was found to be capable of stopping the#
	#building process when there is a merge conflict. pulling the revert #
	#and up process at the beginning of the buildall procedure.          #
	######################################################################
	for ((i=0;i<=LENGTH;i++));                                              
        do      
		if [[ "${PATHS_ARRAY[$i]}" = *"/7/"* ]]                         
                then
			continue
		fi 
		#revert warning
		echo $'\n'$'\n'"!!---WARNING---!! [REVERT & UPDATE BRANCH: ${PATHS_ARRAY[$i]%"tbenv"}]"
		cd ${PATHS_ARRAY[$i]%"tbenv"}		
		
		get_consent                                                  
	        if [ $Y == 0 ]                                                  
	        then                                                            
			revert
			up
			#resetting the flag                                     
	                Y=1                                                     
	        else                                                            
	                continue                                                
	        fi
	done  

	#start building process	
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
        echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo $'\n'$'\n'"!!---WARNING---!! [IT IS HIGHLY RECOMMENDED TO LEAVE THIS TERMINAL ALONE FROM THIS POINT]"
           
	for ((i=0;i<=LENGTH;i++));                                              
        do
		#########################################################              	  
		#       Skip Tibero 7 from the branches to build        #
		#########################################################
			if [[ ${PATHS_ARRAY[$i]} == *"/7/"* ]]
			then
				continue
			fi
		BUILD_CHECK=0
		#calling build() for each branch
		build ${PATHS_ARRAY[$i]%"tbenv"}
		#if built succesfully, put the branch name 
		#in the success array, and vice versa
		if [ $BUILD_CHECK == 0 ]	
		then
			((SUCCESS_COUNT++))
			SUCCESS[SUCCESS_COUNT]=${PATHS_ARRAY[$i]%"tbenv"}
		else
			((FAIL_COUNT++))
			FAIL[FAIL_COUNT]=${PATHS_ARRAY[$i]%"tbenv"}
		fi
        done     
        
	#once every branch's build process is over
	if [ "$SUCCESS_COUNT" -gt 0 ]                                           
        then
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [LIST OF BRANCHES SUCCESSFULLY BUILT]"	

		#each count works as a loop controller
		((SUCCESS_COUNT--))
		for ((i=0;i<=SUCCESS_COUNT;i++));			
		do
			echo "${SUCCESS[$i]}"
		done
 	fi

	if [ "$FAIL_COUNT" -gt 0 ]
	then
        	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [LIST OF BRANCHES FAILED BUILDING]"
		echo "!!---PROGRESS LOG---!! [PLEASE CHECK failed_build_log INSIDE OF THE BRANCH]"

		#each count works as a loop controller
		((FAIL_COUNT--))
		for ((i=0;i<=FAIL_COUNT;i++));
		do
			echo "${FAIL[$i]}"
		done           
	fi
        
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE COMPLETED]"
}


function build()
{
	ERROR_CHECK=0
	
	if [ ! -z "$1" ]
	then
		cd "$1"
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [build started for branch: $1]"
	else
		#revert warning for single build
		echo $'\n'$'\n'"!!---WARNING---!! [THIS WILL REVERT EVERYTHING! IS IT OKAY?]"
		get_consent
		if [ $Y == 0 ]
		then 
			echo $'\n'$'\n'"!!---PROGRESS LOG---!! [build started]"
			#resetting the flag
			Y=1
		else
			return 1
		fi
	fi

	#check if this is a correct directory
	if [ ! -f "tbenv" ]
	then
		echo $'\n'$'\n'"!!---ERROR---!! [NOT A PROPER TIBERO BRANCH DIRECTORY]"
		return 1
	fi

	henv
	
	set_prebuilt
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi
	
	link_prebuilt
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi
	
	#If this function is called from buildall(), the branch has already
	#gone through revert and update process
	if [ -z "$1" ]                                                        
        then 
		revert
		up
	fi
	
	jamrules
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi
	
	autoconf
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi

	jamtool

	cd src
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [FIRST jam -j9 started]"	
	jam -j9 > ../failed_build_log
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [SECOND jam -j9 started]"  
	jam -j9 > ../failed_build_log
	cd ..

	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE COMPLETED]"

	#build then store the output into a temp file "failed_build_log"
	#search "failed" in the log
	#if it does not exist, remove the temp log file
	if grep -Fxq "BUILD FAILED" failed_build_log
	then
		echo $'\n'$'\n'"!!---ERROR---!! [BUILD FAILED: SEE failed_build_log]"
		BUILD_CHECK=1
	else
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD SUCCESSFUL]"
		BUILD_CHECK=0
		rm failed_build_log
	fi
}



#setting the path to prebuilt directory
function set_prebuilt()
{	
	if [ -z "$PREBUILT_PATH" ]
	then
		PREBUILT_PATH=`find "$MAIN_DIR" -name prebuilt | head -n 1`
	fi

	if [ -z "$PREBUILT_PATH" ]
	then
		echo "!!---ERROR---!! [prebuilt directory not found]"
		$ERROR_CHECK=1
		return 1
	fi
		
}

#simple svn revert
function revert()
{	
	svn revert -R .
}

#simple svn up
function up()
{
	svn up . 
}

#run tbenv with given TB_SID; if no TB_SID is given, it is set to 'tibero'
function henv ()
{
	if [ "$#" -eq 0 ]
		then
			. tbenv `pwd` tibero
			set_prompt
	else
		. tbenv `pwd` $1
		set_prompt
	fi
}

#build helper - copy jamrules then remove the comment for license check
function jamrules()
{
	cd src

	if [ ! -f "Jamrules.local.eg" ]
	then
		echo "!!---ERROR---!! [Jamrules.local.eg not found]"
		$ERROR_CHECK=1
		return 1
	fi

	cp Jamrules.local.eg Jamrules.local
	sed -i -e 's/# DEFS_ADD += -D_DONT_CHECK_LICENSE/DEFS_ADD += -D_DONT_CHECK_LICENSE/g' Jamrules.local
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Jamrules.local edited]"
	cd ..
}

#build helper - run and build configure automatically
function autoconf()
{
	cd src/autoconf

	if [ ! -f "configure" ]
	then
		echo "!!---ERROR---!! [configure not found]"
		$ERROR_CHECK=1
		return 1
	fi

	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [run configure]"
	./configure	
	cd ..
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [jam autoconf started]"
	jam autoconf
	cd ..
}

#build helper - literally build the tools
function jamtool()
{	
	cd src
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [jam tool started]"
	jam tool
	cd ..
}

#build helper - create a link for prebuild if it does not exist
function link_prebuilt()
{	
	cd tools
	if [ ! -d "prebuilt" ]
	then
		ln -s "$PREBUILT_PATH" prebuilt
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [prebuilt link added]"
	fi
	cd ..
}
