#! /bin/bash

### author	= "HYUNSOO PARK"
### email	= "hyunsoo_park2@tmax.co.kr"
### version	= "distribution.2.1"
### date	= "2017-12-05"
 
########################################################
#						       #
#		INITIAL SET UP - HOW TO		       #
#						       #
# 1. Download this script			       #
#						       #
# 2. Put this script inside of $HOME/bin/	       #
#						       #
# 3. Change the following variables' values below      #
#						       #
# 4. vi $HOME/.bashrc -> then add ". thisscriptname"   #
#    at the end of the file -> wq!		       #
#						       #
# 5. Launch a new terminal, then all set!	       #
#						       #
########################################################

########################################################
#						       #
# PATH TO THE DIRECTORY CONTAINING ALL TIBERO VERSIONS #
#						       #
#		  EDIT THE FOLLOWING	 	       #
#						       #
########################################################
MAIN_DIR="$HOME/tibero"
FIVE_PATCH_DIR="$MAIN_DIR/patches/5/patch"
SIX_PATCH_DIR="$MAIN_DIR/patches/6/patch"

########################################################
#						       #
#		    AVAILABLE COMMANDS		       #
#						       #
# [IN THE DIRECTORY WITH 'tbenv']		       #
# 1. 	$ hevn					       #
#    	run tbenv with SID of 'tibero'		       #
# 1.a   $ hevn somename				       #
#    	run tbenv with SID of 'somename'	       #
#						       #
# 2.    $ build					       #
#	build the branch for ya!		       #
#						       #
# 3.	$ hpatch tiberoversion patchfilename	       #
#	ex) $ hpatch 6 FS05_CS_131451a		       #
#	if you set up the above variables correctly,   #
#	the command = patch -p0 < 6/patch/FS05_CS...   #
#	                                               #
# 4.    $ newmount                                     #
#       mount a new DB for ya!                         #
#						       #
# [IN ONE OF THE TIBERO BRANCH DIRECTORIES]	       #
# 4.	$ up					       #
#	= svn up .				       #
# 						       #
# 5.	$ revert				       #
#	= svn revert -R .			       #
#						       #
# [IN THE DIRECTORY WITH ALL OF THE TIBERO BRANCHES    #
# 6.	$ buildall				       #
#	build every branch in the directory for you    #
#						       #
########################################################

#################################################################               
#                                                               #               
#         	  FUNCITONAL PART OF THE SCRIPT      	   	#               
#                                                               #               
################################################################# 

function get_consent()                                                          
{                                                                               
        echo $'\n'"(TYPE 'Y' OR 'y' TO PROCEED)"                                
        read RESPONSE                                                           
        if [ "$RESPONSE" == "Y" ] || [ "$RESPONSE" == "y" ]; then               
                Y=0                                                             
        else                                                                    
                Y=1                                                             
        fi                                                                      
}     

function hpatch()
{
	if [ -z "$2" ]
	then
		echo $'\n'$'\n'"!!---ERROR---!! [NO SUCH PATCH FILE GIVEN]"
		return 1
	fi

	PATH_TO_PATCH_FILE=""
	if [ "$1" == "5" ]
	then
		PATH_TO_PATCH_FILE=$FIVE_PATCH_DIR/$2
	elif [ "$1" == "6" ]
	then
		PATH_TO_PATCH_FILE=$SIX_PATCH_DIR/$2
	else
		echo $'\n'$'\n'"!!---ERROR---!! [NO SUCH PATCH DIRECTORY]"
		return 1
	fi
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Patching: $PATH_TO_PATCH_FILE]"
	
	patch -p 0 < $PATH_TO_PATCH_FILE
}

#helper functon for the buildall procedure
function printBranchesGetSkip(){

        #index of the array keeping indices of branches to skip
	SKIP_COUNTER=0

        #flag to mark the point when user is done with registering branches to skip to build
        SKIP_DONE=1


        #########################################################
        #       Skip Tibero 7 from the branches to build        #
        #########################################################
        for ((i=0;i<=LENGTH;i++));
        do
            if [[ "${PATHS_ARRAY[$i]}" = *"/7/"* ]]
            then
                SKIP[$SKIP_COUNTER]=$i
                ((SKIP_COUNTER++))
            fi
        done

	ERROR_MSG=""

        while [ $SKIP_DONE == 1 ]
        do
	    BRANCH_COUNT=0
	    for ((i=0;i<=LENGTH;i++));                                              
            do		
		if [[ "${PATHS_ARRAY[$i]}" = *"/7/"* ]]
		then
			BRANCHES[$BRANCH_COUNT]="[X] "$i": ${PATHS_ARRAY[$i]%"tbenv"} >>> Automatically skipping Tibero 7"
			((BRANCH_COUNT++))
			continue
		fi

		LOOP_CONTROL=$SKIP_COUNTER
                for ((k=0;k<$LOOP_CONTROL;k++))
                do
			SKIP_VAL="O"
        	        if [ "${SKIP[$k]}" == "$i" ]
                        then
				SKIP_VAL="X"
				break
                        fi
                done

		#if there is nothing to skip initially
		if [ $LOOP_CONTROL -eq 0 ]
		then
			SKIP_VAL="O"			
		fi
		
		BRANCHES[BRANCH_COUNT]="[$SKIP_VAL] "$i": ${PATHS_ARRAY[$i]%"tbenv"}"
		((BRANCH_COUNT++))
	    done

	    #clear the terminal screen first
            clear
 	   
	    #check detected branches
            echo $'\n'$'\n'"[LIST OF BRANCHES TO BUILD]"
 
	    #actually print out the list
	    printf '%s\n' "${BRANCHES[@]}"

            echo $'\n'$'\n'"Enter the number of the branch on the list you wish to skip in buidling procedure"
            echo "Type \"done\" when you are done and wish to start the procedure"
	    echo "$ERROR_MSG"
            
            read SKIP_RESPONSE
            
            if [ $SKIP_RESPONSE == "done" ]
            then
                #get out of the skipping loop
                SKIP_DONE=0
            else
                # if [[ -z "$SKIP_RESPONSE" || $SKIP_RESPONSE == *[^[:digit:]]* ]]
                if [[ ! $SKIP_RESPONSE =~ ^[0-9]+$ ]]
                then
                    #user input is not a number
                    ERROR_MSG="!!---ERROR---!! [Please enter a number on the list above]"
                #I KNOW THIS LOOKS WEIRD BUT IT'S BECAUSE BASH SYNTAX IS FUCKED UP.
                elif [ $(($SKIP_RESPONSE - $LENGTH)) -gt 0 ]
                then
                    #user input is out of the range
                    ERROR_MSG="!!---ERROR---!! [Please enter a number on the list above]"
                else
                    UNSKIP=0
                    LOOP_CONTROL=$SKIP_COUNTER
                    for ((j=0;j<$LOOP_CONTROL;j++))
                    do
                        if [ "${SKIP[$j]}" == "$SKIP_RESPONSE" ]
                        then
			    #check T7 unskip
			    if [[ "${PATHS_ARRAY[${SKIP[$j]}]}" = *"/7/"* ]]
			    then
				ERROR_MSG="!!---WARNING---!! [YOU CANNOT UNSKIP T7]"
			    else
				ERROR_MSG="!!---PROGRESS LOG---!! [UNskipping "${SKIP[$j]}": ${PATHS_ARRAY[${SKIP[$j]}]%"tbenv"}]"
                            	unset SKIP[$j]
                            	SKIP=( "${SKIP[@]}" )
                            	((SKIP_COUNTER--))
                            	UNSKIP=1
			    fi
                        fi
                    done
                   
                    if [ ! $UNSKIP == 1 ]
                    then
                        ERROR_MSG="!!---PROGRESS LOG---!! [Skipping "$SKIP_RESPONSE": ${PATHS_ARRAY[$SKIP_RESPONSE]%"tbenv"}]"
                        SKIP[$SKIP_COUNTER]=$SKIP_RESPONSE
                        ((SKIP_COUNTER++))
                    fi
                fi
            fi
	done
}

function buildall()
{
	#counter for build success and failure
	SUCCESS_COUNT=0                                                         
	FAIL_COUNT=0    

	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [SEARCHING FOR BRANCHES TO BUILD (this could take several minutes)]"
	#find all locations of tbevn script in the parent directory
	PATHS=$(find -L $MAIN_DIR -name tbenv)
       
	#split paths into an array 
	PATHS_ARRAY=($PATHS)
	
	#get the length of the array then decrement it by 1 for loop control
        LENGTH=${#PATHS_ARRAY[*]}                                                     
        ((LENGTH--))                                                            

	#clear the terminal first
	clear

        printBranchesGetSkip

	######################################################################
	#[2017-12-06] svn up conflict was found to be capable of stopping the#
	#building process when there is a merge conflict. pulling the revert #
	#and up process at the beginning of the buildall procedure.          #
	######################################################################
	for ((i=0;i<=LENGTH;i++));                                              
        do      
		#T7 check
		if [[ "${PATHS_ARRAY[$i]}" = *"/7/"* ]]                         
                then
			continue
		fi

		#skip branch check
		SKIP_CHECK="N"
		LOOP_CONTROL=$SKIP_COUNTER
                for ((k=0;k<$LOOP_CONTROL;k++))
                do
                        if [ "${SKIP[$k]}" == "$i" ]
                        then
                                SKIP_CHECK="Y"
                                break
                        fi
                done
		
		if [ "$SKIP_CHECK" == "Y" ]
		then
			continue
		fi

		#revert warning
		echo $'\n'$'\n'"!!---WARNING---!! [REVERT & UPDATE BRANCH: ${PATHS_ARRAY[$i]%"tbenv"}]"
		cd ${PATHS_ARRAY[$i]%"tbenv"}		
		
		get_consent                                                  
	        if [ $Y == 0 ]                                                  
	        then                                                            
			revert
			up
			#resetting the flag                                     
	                Y=1                                                     
	        else
	                continue                                                
	        fi
	done  

	#clear the terminal
	clear

	echo $'\n'$'\n'"!!---WARNING---!! [START BUILDING ALL, OKAY?]"

	get_consent
        if [ $Y != 0 ]
        then
        	#resetting the flag                                     
                Y=1
		return 1
        fi

	#start building process	
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
        echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo "!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE STARTED]"
	echo $'\n'$'\n'"!!---WARNING---!! [IT IS HIGHLY RECOMMENDED TO LEAVE THIS TERMINAL ALONE FROM THIS POINT]"
           
	for ((i=0;i<=LENGTH;i++));                                              
        do
		#########################################################              	  
		#       Skip Tibero 7 from the branches to build        #
		#########################################################
		if [[ ${PATHS_ARRAY[$i]} == *"/7/"* ]]
		then
			continue
		fi

		#skip branch check
                SKIP_CHECK="N"
                LOOP_CONTROL=$SKIP_COUNTER
                for ((k=0;k<$LOOP_CONTROL;k++))
                do
                        if [ "${SKIP[$k]}" == "$i" ]
                        then
                                SKIP_CHECK="Y"
                                break
                        fi
                done
                
                if [ "$SKIP_CHECK" == "Y" ]
                then
                        continue
                fi

		#calling build() for each branch
		build ${PATHS_ARRAY[$i]%"tbenv"}
		#if built succesfully, put the branch name 
		#in the success array, and vice versa
		if [ $BUILD_CHECK == 0 ]	
		then
			SUCCESS[SUCCESS_COUNT]=${PATHS_ARRAY[$i]%"tbenv"}
			((SUCCESS_COUNT++))
		else
			FAIL[FAIL_COUNT]=${PATHS_ARRAY[$i]%"tbenv"}
			((FAIL_COUNT++))
		fi
        done     
        
	#once every branch's build process is over
	if [ "$SUCCESS_COUNT" -gt 0 ]                                           
        then
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [LIST OF BRANCHES SUCCESSFULLY BUILT]"	
		#each count works as a loop controller
		((SUCCESS_COUNT--))
		for ((i=0;i<=SUCCESS_COUNT;i++));			
		do
			echo "${SUCCESS[$i]}"
		done
 	fi

	if [ "$FAIL_COUNT" -gt 0 ]
	then
        	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [LIST OF BRANCHES FAILED BUILDING]"
		echo "!!---PROGRESS LOG---!! [PLEASE CHECK failed_build_log INSIDE OF THE BRANCH]"

		#each count works as a loop controller
		((FAIL_COUNT--))
		for ((i=0;i<=FAIL_COUNT;i++));
		do
			echo "${FAIL[$i]}"
		done           
	fi
        
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD ALL PROCEDURE COMPLETED]"
}

function build()
{
	ERROR_CHECK=0
	BUILD_CHECK=0
	
	if [ ! -z "$1" ]
	then
		cd "$1"
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [build started for branch: $1]"
	else
		#revert warning for single build
		echo $'\n'$'\n'"!!---WARNING---!! [REVERT THE BRANCH?]"

                #for reverting
		get_consent
		if [ $Y != 0 ]
                then
			#exit			
			return 1
		else
			echo $'\n'$'\n'"!!---PROGRESS LOG---!! [build started]"
			#resetting the flag
			Y=0
		fi
	fi

	#check if this is a correct directory
	if [ ! -f "tbenv" ]
	then
		echo $'\n'$'\n'"!!---ERROR---!! [NOT A PROPER TIBERO BRANCH DIRECTORY]"
		return 1
	fi

	henv
	
	set_prebuilt
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi
	
	link_prebuilt
	if [ $ERROR_CHECK == 1 ]
	then
		return 1
	fi
	
	#If this function is called from buildall(), the branch has already
	#gone through revert and update process
	if [ -z "$1" ]                                                        
        then 
		if [ $Y == 0 ]
                then
                    revert
                    #resetting the consent flag
                    Y=1
                fi
		up
	fi
	
	jamrules
	if [ $ERROR_CHECK == 1 ]
	then
		BUILD_CHECK=1
		return 1
	fi
	
	autoconf
	if [ $ERROR_CHECK == 1 ]
	then
		BUILD_CHECK=1
		return 1
	fi

	jamtool

        #skipping client parts' dumb code that never seems to build- ever.
        mv src/client/tbcreatedb/Jamfile src/client/tbcreatedb/skipme
        mv src/client/tbepa/java/Jamfile src/client/tbepa/java/skipme
        mv src/client/tbjdbc/Jamfile src/client/tbjdbc/skipme

	cd src
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [FIRST jam -j9 started]"	
	jam -j9 > ../failed_build_log
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [SECOND jam -j9 started]"  
	jam -j9 > ../failed_build_log
	cd ..

        #reverting dumb skipped files
        mv src/client/tbcreatedb/skipme src/client/tbcreatedb/Jamfile
        mv src/client/tbepa/java/skipme src/client/tbepa/java/Jamfile
        mv src/client/tbjdbc/skipme src/client/tbjdbc/Jamfile

	#build then store the output into a temp file "failed_build_log"
	#search "failed" in the log
	#if it does not exist, remove the temp log file
	if grep -Fxq "BUILD FAILED" failed_build_log
	then
		echo $'\n'$'\n'"!!---ERROR---!! [BUILD FAILED: SEE failed_build_log]"
		BUILD_CHECK=1
	else
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [BUILD SUCCESSFUL]"
		BUILD_CHECK=0
		rm failed_build_log
	fi
}

#setting the path to prebuilt directory
function set_prebuilt()
{	
	if [ -z "$PREBUILT_PATH" ]
	then
		PREBUILT_PATH=`find "$MAIN_DIR" -name prebuilt | head -n 1`
	fi

	if [ -z "$PREBUILT_PATH" ]
	then
		echo "!!---ERROR---!! [prebuilt directory not found]"
		$ERROR_CHECK=1
		return 1
	fi
		
}

#simple svn revert
function revert()
{	
	svn revert -R .
}

#simple svn up
function up()
{
	svn up . 
}

#run tbenv with given TB_SID; if no TB_SID is given, it is set to 'tibero'
function henv ()
{
	if [ "$#" -eq 0 ]
		then
			. tbenv `pwd` tibero
			set_prompt
	else
		. tbenv `pwd` $1
		set_prompt
	fi
}

#build helper - copy jamrules then remove the comment for license check
function jamrules()
{
	cd src

	if [ ! -f "Jamrules.local.eg" ]
	then
		echo "!!---ERROR---!! [Jamrules.local.eg not found]"
		$ERROR_CHECK=1
		return 1
	fi

	cp Jamrules.local.eg Jamrules.local
	sed -i -e 's/# DEFS_ADD += -D_DONT_CHECK_LICENSE/DEFS_ADD += -D_DONT_CHECK_LICENSE/g' Jamrules.local
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Jamrules.local edited]"
	cd ..
}

#build helper - run and build configure automatically
function autoconf()
{
	cd src/autoconf

	if [ ! -f "configure" ]
	then
		echo "!!---ERROR---!! [configure not found]"
		$ERROR_CHECK=1
		return 1
	fi

	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [run configure]"
	./configure	
	cd ..
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [jam autoconf started]"
	jam autoconf
	cd ..
}

#build helper - literally build the tools
function jamtool()
{	
	cd src
	echo $'\n'$'\n'"!!---PROGRESS LOG---!! [jam tool started]"
	jam tool
	cd ..
}

#build helper - create a link for prebuild if it does not exist
function link_prebuilt()
{	
	cd tools
	if [ ! -d "prebuilt" ]
	then
		ln -s "$PREBUILT_PATH" prebuilt
		echo $'\n'$'\n'"!!---PROGRESS LOG---!! [prebuilt link added]"
	fi
	cd ..
}

#instance making
function newmount(){
        if [ -z ${TB_SID} ]
        then
            echo $'\n'$'\n'"!!---ERROR---!! [TB_SID not detected: Please run 'henv' command first]"
            return 1
        fi

        cd config
        if [ ! -f ${TB_SID}.tip ]
        then
            echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Generating tip file]"
            ./gen_tip
        else
            echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Tip file already exists: ${TB_SID}.tip ]"
        fi

        echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Changing the listener port to 8629]"

        sed -i -e 's/#LISTENER_PORT=@PORT@/LISTENER_PORT=8629/g' ${TB_SID}.tip
        
        cd ../src/scripts
        echo $'\n'$'\n'"!!---PROGRESS LOG---!! [Mounting a new DB]"
        ./tb_newmount.sh

        cd ../..
        echo $'\n'$'\n'"!!---PROGRESS LOG---!! [DB Newmount completed]"        
}

